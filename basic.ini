# Configuration file for docker/podman containers used by zbox scripts.
# This is the common file included by all other configurations.
#
# Value format is as supported by python ConfigParser
# (e.g. https://docs.python.org/3/library/configparser.html for Python3 docs).
# Specifically boolean values are extracted using getboolean() method which supports
# many different values like on/off, true/false etc.
#
# In addition values can contain environment variables using the notation supported by
# python expandvars (https://docs.python.org/3/library/os.path.html#os.path.expandvars).
# A few special environment variables are also available:
#   - DISTRIBUTION_NAME: name of the Linux distribution (as provided to 'zbox-create')
#   - CONTAINER_NAME: name of the current container (as provided to 'zbox-create')
#   - CONTAINER_DIR: set to $HOME/.local/share/zbox/$CONTAINER_NAME for convenience
#   - TARGET_HOME: set to the home directory of the container user
# Additionally a special notation can be used for current date+time with this notation:
#   ${NOW:<fmt>}". The <fmt> uses the format supported by python strftime
# (https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime)
# while the NOW is the result of datetime.now() call.
#
# NOTE: Take care to have different path settings point to distinct directory/path
# locations e.g. base.home and base.log_opts.path should point to different directories
# else you can lose one or the other since the code currently does not check for
# such overlaps and will happily mount the directory as the container home while logs
# are also being written there which can result in an unpredictable behavior.
# The shared root directory used when base.shared is provided points to
# $HOME/.local/share/zbox/$DISTRIBUTION_NAME-root which is not configurable as of now,
# so that should not be used by any such settings either.
# Likewise the configuration files in [configs] section are temporarily copied/linked in
# $CONTAINER_DIR/configs which is not configurable and should not be used and
# there is a temporary mount directory having utility scripts in $CONTAINER_DIR/zbox-scripts


# Basic container settings that are documented individually below.
[base]
# Comma separated files to include before applying these settings.
# Paths can be absolute or relative to the location of this file.
includes =
# Bind mount the container $TARGET_HOME to this local path. This makes it easier for
# backup software and otherwise to read useful container data.
# If not provided then you should explicitly mount required directories in the [mounts]
# section otherwise home will remain completely ephemeral which is not recommended.
home = $CONTAINER_DIR/home
# Whether the configuration files (specified in [configs] section) should be hardlinked
#    to a temporary directory that is made available to the container, or copied over.
# Hardlinks will not work if you have mounted the temporary directory inside
# ~/.local/share/zbox on a separate volume other than home itself.
# Directories are hardlinked recursively and symlinks in the source are followed to their
# destination which must again exist on the same filesystem.
#
# In case of hardlinks, any changes made on host will be immediately visible otherwise
# you need to restart the container to let it see any changes.
# You can also use this for only first time reference and then make a separate copy
# inside the container which will break any direct sharing between the host and container.
config_hardlinks = true
# If enabled then X server from the user session is available to the container.
x11 = on
# If enabled then Wayland server from the user session is available to the container.
wayland = on
# If enabled then pulse/pipewire from the user session is available to the container.
# Note that this will enable both/either of pulse/pipewire whichever is available on the host.
pulseaudio = on
# If enabled then dbus from the user session is available to the container.
dbus = on
# If enabled then the system dbus from the host is available to the container.
dbus_sys = on
# If enabled then Direct Rendering Infrastructure is available to the container.
dri = on
# If enabled then NVIDIA GPUs will be available to the container. You need to install
# NVIDIA container toolkit for this to work. Refer to Arch wiki for details which usually
# works well on most Linux distros (https://wiki.archlinux.org/title/docker or
#    https://wiki.archlinux.org/title/podman), and/or the official NVIDIA docs:
#  https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html
nvidia = off
# Limit the maximum number of processes in the container (to avoid stuff like fork bombs).
pids_limit = 2048
# Logging driver to use. Default for docker/podman is to use journald in modern Linux
# distributions which completely pollutes the journald logs.
log_driver = json-file
# Semi-colon separated options for the logger.
log_opts = path=$CONTAINER_DIR/logs/${NOW:%Y-%m-%d_%H.%M.%S}.log;max-size=10m;max-file=3


# The security-opt and other security options passed to docker/podman.
# You should restrict these as required.
# If these have to be relaxed for some apps, then it is highly recommended to put
# those in their own separate containers having minimal or no access to original home
# directories to isolate them as much as possible. Do read up on security implications
# before relaxing these.
# See docs like https://docs.docker.com/engine/security/seccomp,
# https://docs.docker.com/engine/security/apparmor,
# https://docs.podman.io/en/latest/markdown/podman-run.1.html etc
# The following keys are available (not all of these may be supported by the available
#     docker/podman installation but are passed as is, so they can throw an error):
#   label: corresponding to --security-opt=label=...
#   apparmor: --security-opt=apparmor=...
#   seccomp: --security-opt=seccomp=...
#   mask: --security-opt=mask=...
#   unmask: --security-opt=unmask=...
#   no_new_privileges: boolean to enable --security-opt=no-new-privileges
#   proc_opts: --security-opt=proc-opts=...
#   seccomp_policy: --seccomp-policy=...
#   caps_add: semi-colon separated multiple --cap-add=... options
#   caps_drop: semi-colon separated multiple --cap-drop=... options
#   cgroup_parent: --cgroup-parent=...
#   cgroup_confs: semi-colon separated multiple --cgroup-conf=... options
#   cgroupns: --cgroupns=...
#   cgroups: --cgroups=...
#   device_cgroup_rules: semi-colon separated multiple --device-cgroup-rule=... options
#   secrets: semi-colon separated multiple --secret=... options
[security]
# The options are sent as is to docker/podman e.g. "label=type:container_runtime_t"
# (the default "container_runtime_t" label bypasses some selinux restrictions)
label = type:container_runtime_t


# These are docker/podman volumes that can use either the format of --mount or -v options
# (the scripts make a quick guess by searcing for = or ,).
# These will typically include some directories from your home like Downloads.
[mounts]
# Share terminfo definitions which may be missing for some terminals in the container.
terminfo = /usr/share/terminfo:/var/terminfo:ro
# Downloads is used by most container apps to pass over data to original session easily
# so it should not contain "unsharable" stuff.
downloads = $HOME/Downloads:$TARGET_HOME/Downloads


# These can be used to specify the configuration files from the host session
# that you want to share with the container. The files from the host session
# will either be copied or hardlinked (depending on the "config_hardlinks" option in [base]
#   section) to a directory that is mounted read-only.
#
# The value has two parts separated by "->" with the LHS of this being the source that
# is to be copied while the RHS is the required relative path in the target directory.
# On the target container the same is used to symlink from the target on RHS to source on LHS.
# Source is skipped if it does not exist or not readable with a message on standard output.
#
# Typically this will contain shell, vim and other common configuration files.
# These can be either files or directories and are skipped if they do not exist.
# The keys here have no special significance other than the fact that they should be
# unique and can be used to override in later files that include this one.
#
# Note: The files are symlinks in the container user area and are mounted on a read-only
# mount by default, so if you need to change a file within a container then you will
# need to first remove the symlink and make a copy of the file. This will remove the
# direct sharing between the two which has to be done manually thereon if required.
# The sharing behavior also depends on "config_hardlinks" as described in its comment above
# in the [base] section.
#
# Note: The HOME environment variable here will be evaluated both in the host
# session (for the source to be transferred) and inside the container session
# (for the target). Do not use TARGET_HOME here which can be incorrect for the host session.
[configs]
bashrc = $HOME/.bashrc -> .bashrc
aliases = $HOME/.aliases -> .aliases
sh_env = $HOME/.sh_env -> .sh_env
fishrc = $HOME/.config/fish -> .config/fish
zshrc = $HOME/.zshrc -> .zshrc
zsh_p10 = $HOME/.p10k.zsh -> .p10k.zsh
dir_colors = $HOME/.dir_colors -> .dir_colors
vimrc = $HOME/.vimrc -> .vimrc
nvimrc = $HOME/.config/nvim -> .config/nvim
pipconf = $HOME/.config/pip/pip.conf -> .config/pip/pip.conf
gitconf = $HOME/.gitconfig -> .gitconfig
gtk2rc = $HOME/.gtkrc-2.0 -> .gtkrc-2.0
gtk3rc = $HOME/.config/gtk-3.0/settings.ini -> .config/gtk-3.0/settings.ini
gtk4rc = $HOME/.config/gtk-4.0/settings.ini -> .config/gtk-4.0/settings.ini
qt5conf = $HOME/.config/Trolltech.conf -> .config/Trolltech.conf
qt5ctconf = $HOME/.config/qt5ct/qt5ct.conf -> .config/qt5ct/qt5ct.conf
ariaconf = $HOME/.config/aria2/aria2.conf -> .config/aria2/aria2.conf
btopconf = $HOME/.config/btop/btop.conf -> .config/btop/btop.conf
mpvconf = $HOME/.config/mpv/mpv.conf -> .config/mpv/mpv.conf


# Environment variables set for the container using invoking docker/podman environment.
# Environment variables in values can be specified like usual which are expanded by
# python expandvars as usual.
#
# X, pulse and other such environment variables are set automatically by the settings
# in the [base] section but one can override/add to them explicitly here if required.
#
# Keys without values can be specified which are sent as such to the "-e" option
# which means they will be set and passed if set in the invoking docker/podman environment.
[env]
XDG_RUNTIME_DIR
TERM
TERMINFO_DIRS=/usr/share/terminfo:/var/terminfo


# Additional apps to be installed in the container. Note that these are installed
# on first container startup and will go away if the container is removed, so you
# should keep persistent data related to apps on separate persistent storage
# specified in the [mounts] section above.
[apps]
# The format is a unique name followed by semi-colon separated package names of the distro
# specific packages. It can include an "extra-args=" to pass to the package manager.
#firefox = firefox
#firefox_deps = hunspell-en_US;extra-args=--asdeps


# Startup programs you want to run when starting the container. These are run using
# /bin/bash shell of the container, so you can use shell variables if required.
# These programs are run as normal container user, so if you need to run using root
# account then add 'sudo' before the command.
[startup]
# for example you can avoid sharing dbus of the original session rather start a separate one
#dbus = /usr/bin/dbus-daemon --session
#dbus_sys = sudo /usr/bin/dbus-daemon --system
