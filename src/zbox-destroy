#!/usr/bin/python3

from zbox.state import ZboxStateManagement
from zbox.util import *


def main() -> int:
    args = parse_args()
    docker_cmd = get_docker_command(args, "-d")
    container_name = args.container_name

    if not check_zbox_state(docker_cmd, container_name, expected_states=[]):
        print_color(f"No zbox container named '{container_name}' found", fg=fgcolor.red)
        return 1

    print_color(f"Stopping zbox container '{container_name}'", fg=fgcolor.cyan)
    stop_result = subprocess.run([docker_cmd, "container", "stop", container_name])
    if stop_result.returncode != 0:
        print_color(f"FAILED to stop '{container_name}'", fg=fgcolor.red)
        # continue since the container may already be in stopped state

    print_color(f"Removing zbox container '{container_name}'", fg=fgcolor.purple)
    rm_result = subprocess.run([docker_cmd, "container", "rm", container_name])
    if rm_result.returncode != 0:
        print_color(f"FAILED to remove '{container_name}'", fg=fgcolor.red)
        return 1

    # remove the state from the database
    print_color(f"Clearing zbox state for '{container_name}'", fg=fgcolor.purple)
    with ZboxStateManagement(Environ()) as state:
        count = state.remove_container(container_name)
        if count != 1:
            print_color(f"Expected entry for '{container_name}' to be removed from state "
                        f"but removal count was {count}", fg=fgcolor.red)
            return 1

    return 0


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Stop and remove a running zbox container")
    parser.add_argument("-d", "--docker-path", type=str,
                        help="path of docker/podman if not in /usr/bin")
    parser.add_argument("container_name", type=str, help="name of the running zbox")
    return parser.parse_args()


sys.exit(main())
