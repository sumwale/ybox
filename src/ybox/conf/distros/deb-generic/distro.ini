# Configuration specific to each distribution (INI style file)

# The following environment variables are set when running the init.sh and init-user.sh scripts.
# The scripts are required to honor the meaning of the corresponding variables as described in
# their comments.
#   CONFIGURE_FASTEST_MIRRORS: empty or non-empty corresponding to configure_fastest_mirrors below
#   REQUIRED_PKGS: packages specified in `packages.required` below
#   REQUIRED_DEPS: packages specified in `packages.required_deps` below
#   RECOMMENDED_PKGS: packages specified in `packages.recommended` below
#   RECOMMENDED_DEPS: packages specified in `packages.recommended_deps` below
#   SUGGESTED_PKGS: packages specified in `packages.suggested` below
#   SUGGESTED_DEPS: packages specified in `packages.suggested_deps` below
#   EXTRA_PKGS: packages specified in `packages.extra` below


# Base configuration for the distribution
[base]
# name is required and should be overridden by distributions using this
name = Generic Debian/Ubuntu distribution
# Comma separated files to include before applying these settings.
# Paths can be absolute or relative to the location of this file.
includes =
# docker image of the distribution
image =
# directories which are shared between the containers of a distribution when
# `shared_root` is provided in the container configuration
shared_root_dirs = /etc,/opt,/usr,/var
# the secondary groups of the container user; it requires to include at least the equivalent of
# nobody/nogroup to work correctly (the last field in /etc/subgid)
secondary_groups = nogroup,sudo,video,input,lp,mail
# whether to search for and configure fastest available mirrors for packages
configure_fastest_mirrors = false
# distribution scripts that need to be copied to the container in $YBOX_TARGET_SCRIPTS_DIR
# (should include init.sh, init-base.sh and init-user.sh scripts that are are normally required
# for all distributions)
# distributions should have relative paths to the scripts from this directory
#scripts = init-base.sh,init.sh,init-user.sh,check-package.sh,list_fmt_long.py,fetch-gpg-key-id.sh
scripts =


# Initial set of packages to be installed in the distribution image
[packages]
# packages required for a functional ybox container
required = git ed zip dctrl-tools
# dependencies of the `required` packages
required_deps = less patch openssh-client unzip bash-completion psmisc
# recommended packages required for many GUI/CLI apps to work properly
recommended = bc man-db manpages pulseaudio-utils bzip2 xz-utils zstd fastjar wget shared-mime-info
              iso-codes vainfo mesa-utils vulkan-tools iputils-ping iproute2 tzdata distro-info
              pciutils whiptail python3-pip fonts-liberation2
# dependencies of the `recommended` packages
recommended_deps = xauth netbase xdg-user-dirs intel-media-va-driver-non-free mesa-va-drivers
                   mesa-vulkan-drivers libfribidi0 fonts-dejavu-core sensible-utils libpam-cap
# optional packages for enhanced experience in shell and GUI apps
suggested = fonts-cantarell fonts-firacode fonts-noto-core neovim ncdu fd-find bat
            kitty-terminfo tree autojump
# dependencies of the `suggested` packages
suggested_deps = xsel xxd


# The commands here will be run as normal userns mapped user, so use sudo if the command
# needs to run as root inside the container
[pkgmgr]
# the variables here are all required ones unless noted otherwise

# install command does not have a placeholder for {package} since it is also used by
# entrypoint scripts to install packages, so this assumes that this command accepts a list of one
# or more space-separated packages at the end
install = DOWNLOADBEFORE=true /usr/bin/apt-fast {quiet} {opt_dep} install
# Show the packages that satisfy the given {package} where latter can be a virtual package
# (i.e. "Provides") or an actual package or a combination of both (e.g. some packages provide and
#  replace another actual package).
check_avail = /bin/sh $YBOX_TARGET_SCRIPTS_DIR/check-package.sh available '{package}'
# check an installed actual or virtual (i.e. "Provides") package and list them in reverse
# install/upgrade time order (i.e. most recently installed/upgraded first)
check_install = /bin/sh $YBOX_TARGET_SCRIPTS_DIR/check-package.sh installed '{package}'
# proceed quietly without asking questions
quiet_flag = -y
# this is substituted for `{quiet}` placeholder in `info`, `info_all`, `search` and `search_all`
quiet_details_flag = -qq
# apt-mark works correctly only if an optional dependency is actually marked to be so in the
# deb package, but will cause trouble for cases where user wants to mark a package as an optional
# dependency of another even otherwise (e.g. qt5ct as optional dependency of libqt5gui5)
opt_dep_flag =
# Expected output of the `opt_deps` command is:
# {header}
# {prefix}<name>{separator}<level>{separator}<installed>{separator}<description>
# where
# <name>: name of the optional dependency
# <level>: level of the dependency i.e. 1 for direct dependency, 2 for dependency of dependency and
#          so on; resolution of level > 2 is not required since caller currently ignores those
# <installed>: true if the dependency already installed and false otherwise
opt_deps = /usr/bin/python3 $YBOX_TARGET_SCRIPTS_DIR/pkgdeps.py \
           -s '{separator}' -p '{prefix}' -H '{header}'
# disable unstable API warning for apt
apt_no_warn = /usr/bin/apt -o Apt::Cmd::Disable-Script-Warning=true
uninstall = /usr/bin/sudo %(apt_no_warn)s {quiet} {purge} {remove_deps} remove {package}
purge_flag = --purge
remove_deps_flag = --autoremove
orphans = /usr/bin/sudo %(apt_no_warn)s --just-print autoremove | /usr/bin/mawk '/^Rem/ { print $2 }'
update_meta = DOWNLOADBEFORE=true /usr/bin/apt-fast update
update = DOWNLOADBEFORE=true /usr/bin/apt-fast --only-upgrade {quiet} install {packages}
update_all = DOWNLOADBEFORE=true /usr/bin/apt-fast {quiet} full-upgrade
clean = DOWNLOADBEFORE=true && /usr/bin/apt-fast clean && /usr/bin/sudo /usr/bin/apt clean
clean_quiet = %(clean)s
mark_explicit = /usr/bin/sudo /usr/bin/apt-mark manual {package}

info = /usr/bin/dpkg-query -s {packages}
info_all = /usr/bin/apt-cache {quiet} show {packages}

# list and list_all show package name and version separated by {separator}; the list command only
# shows explicitly installed packages while the "_all" variant also shows dependents
list = PKGS="$(/usr/bin/apt-mark showmanual {packages} | /usr/bin/tr '\n' ' ')" && \
    /usr/bin/dpkg-query -W -f '${{binary:Package}}{separator}${{Version}}\n' $PKGS
# empty {packages} means all packages
list_all = /usr/bin/dpkg-query -W -f '${{binary:Package}}{separator}${{Version}}\n' {packages}

# next two variables are not required ones rather are used for expansion in list variables
# to avoid repetition
list_fmt_long = /usr/bin/python3 $YBOX_TARGET_SCRIPTS_DIR/list_fmt_long.py '{separator}'
list_long_fields = '${{binary:Package}}{separator}${{Version}}{separator}${{Provides}}'`\
                  `'{separator}${{Pre-Depends}}{separator}${{Depends}}{separator}${{Recommends}}'`\
                  `'{separator}${{Suggests}}{separator}${{Description}}\n\n'
# list_long and list_all_long show package name, version, dependency-of and description separated
# by {separator}; the dependency-of column gives the required and optional dependencies in the
# format: req(<pkg> <pkg> ...),opt(<pkg> <pkg> ...); like above the "_all" variant shows all
# packages including dependents while other one shows only explicitly installed ones
list_long = PKGS="$(/usr/bin/apt-mark showmanual {packages} | /usr/bin/tr '\n' ' ')" && \
    /usr/bin/dpkg-query -W -f %(list_long_fields)s $PKGS | %(list_fmt_long)s
list_all_long = /usr/bin/dpkg-query -W -f %(list_long_fields)s {packages} | %(list_fmt_long)s

list_files = /usr/bin/dpkg-query -L {package}

# next variable is not a required one rather are used for expansion in search variables

# the weird "set ..." subcommand converts space-separated quoted arguments into a
# regex i.e. ' one ' 'two' ' three' to " one |two | three" which is accomplished by declaring
# those arguments as positional arguments $1, $2 etc, then echo all arguments with IFS as "|"
args_re = "{word_start}($(set -- {search}; IFS="|"; echo "$*")){word_end}"

# search in package names in the repositories
search = %(apt_no_warn)s --names-only -q {quiet} {official} search %(args_re)s
# search in package names, provides and descriptions in the repositories
search_all = /usr/bin/apt-cache {quiet} {official} search %(args_re)s
# this is substituted for `{official}` placeholder in `search` and `search_all`
search_official_flag =
# this is substituted for `{word_start}` placeholder in `search` and `search_all`
search_word_start_flag = \b
# this is substituted for `{word_end}` placeholder in `search` and `search_all`
search_word_end_flag = \b

# regex pattern matching processes that may be invoked by package manager directly or indirectly
# that may need to be terminated for cleanup
processes_pattern = \b(apt-get|apt-fast|apt|aptitude|nala|keyboxd|dirmngr)\b
# comma separated globs for package manager related lock files (no spaces in names or within)
locks_pattern = /var/lib/apt/lists/lock,/var/lib/dpkg/lock*,$HOME/.gnupg/public-keys.d/*.lock
repair = /usr/bin/sudo /usr/bin/apt-get --fix-broken {quiet} install
# reinstall all packages
repair_all = %(repair)s && \
             MANUAL_PKGS="$(/usr/bin/apt-mark showmanual)" && \
             PKGS="$(/usr/bin/apt-mark showinstall)" && \
             /usr/bin/apt-fast --reinstall {quiet} install $PKGS && \
             /usr/bin/sudo /usr/bin/apt-mark auto $PKGS >/dev/null && \
             /usr/bin/sudo /usr/bin/apt-mark manual $MANUAL_PKGS >/dev/null && %(clean)s


# Commands related to repository management
[repo]
conf_dir = /etc/apt/sources.list.d
keyring_dir = /etc/apt/keyrings
exists = /bin/test -f "%(conf_dir)s/{name}.list"
# Ubuntu's keyserver is more reliable than the standard gnupg.net/pgp.net ones
default_gpg_key_server = hkps://keyserver.ubuntu.com
# output of the `add_key` command should have a line of the form "KEYID=..." that provides the
# fingerprints of the registered keys that can be passed to `remove_key`
add_key = ( /usr/bin/curl -sSL '{url}' | /usr/bin/gpg --dearmor | \
            /usr/bin/sudo /usr/bin/tee '%(keyring_dir)s/{name}.gpg' >/dev/null) && \
          /bin/echo KEYID="$(/usr/bin/gpg --show-keys --with-colons '%(keyring_dir)s/{name}.gpg' | \
                             /usr/bin/sed -n 's/^fpr:*\([^:]*\).*/\1/p' | /usr/bin/tr '\n' ' ')"
# add gpg/pgp key given the key ID and key server
add_key_id = /usr/bin/sudo /bin/bash $YBOX_TARGET_SCRIPTS_DIR/fetch-gpg-key-id.sh \
               '{key}' '{server}' '%(keyring_dir)s/{name}.gpg'
# additional options if supported should be mentioned using {options} below
add = /bin/echo 'deb [signed-by=%(keyring_dir)s/{name}.gpg] {urls} {options}' | \
      /usr/bin/sudo /usr/bin/tee '%(conf_dir)s/{name}.list'
# if source repository is supported, then it should be provided in `add_source` like for `add`
add_source = /bin/echo 'deb-src [signed-by=%(keyring_dir)s/{name}.gpg] {urls} {options}' | \
             /usr/bin/sudo /usr/bin/tee -a '%(conf_dir)s/{name}.list'
remove_key = /usr/bin/sudo /bin/rm '%(keyring_dir)s/{name}.gpg'
remove = /usr/bin/sudo /bin/rm '%(conf_dir)s/{name}.list'
