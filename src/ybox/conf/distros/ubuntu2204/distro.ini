# Configuration specific to each distribution (INI style file)

# The following environment variables are set when running the init.sh and init-user.sh scripts.
# The scripts are required to honor the meaning of the corresponding variables as described in
# their comments.
#   CONFIGURE_FASTEST_MIRRORS: empty or non-empty corresponding to configure_fastest_mirrors below
#   REQUIRED_PKGS: packages specified in `packages.required` below
#   REQUIRED_DEPS: packages specified in `packages.required_deps` below
#   RECOMMENDED_PKGS: packages specified in `packages.recommended` below
#   RECOMMENDED_DEPS: packages specified in `packages.recommended_deps` below
#   SUGGESTED_PKGS: packages specified in `packages.suggested` below
#   SUGGESTED_DEPS: packages specified in `packages.suggested_deps` below
#   EXTRA_PKGS: packages specified in `packages.extra` below


# Base configuration for the distribution
[base]
# name is required
name = Ubuntu 22.04 LTS Jammy Jellyfish
# Comma separated files to include before applying these settings.
# Paths can be absolute or relative to the location of this file.
includes =
#image = invent-registry.kde.org/neon/docker-images/plasma:user
image = docker.io/library/ubuntu:jammy
# directories which are shared between the containers of a distribution when
# `shared_root` is provided in the container configuration
shared_root_dirs = /etc,/opt,/usr,/var
# the secondary groups of the container user; it requires to include at least the equivalent of
# nobody/nogroup to work correctly (the last field in /etc/subgid)
secondary_groups = nogroup,sudo,video,input,lp,mail
# whether to search for and configure fastest available mirrors for packages
# (ubuntu uses a fixed US mirror by default since those determined dynamically can be flaky)
configure_fastest_mirrors = false
# additional scripts that need to be copied to the container in $YBOX_TARGET_SCRIPTS_DIR
# (init.sh, init-base.sh and init-user.sh scripts are required for all distributions
#  and do not need to be specified here)
scripts =


# Initial set of packages to be installed in the distribution image
[packages]
# packages required for a functional ybox container
required = git ed zip dctrl-tools
# dependencies of the `required` packages
required_deps = less patch unzip bash-completion
# recommended packages required for many GUI/CLI apps to work properly
recommended = bc man-db manpages pulseaudio-utils fastjar wget openssh-client shared-mime-info
              iso-codes vainfo mesa-utils vulkan-tools iputils-ping iproute2 tzdata distro-info
              python3-pip fonts-dejavu-core fonts-liberation2
# dependencies of the `recommended` packages
recommended_deps = xauth netbase xdg-user-dirs intel-media-va-driver-non-free mesa-va-drivers
                   mesa-vulkan-drivers
# optional packages for enhanced experience in shell and other apps
suggested = fonts-cantarell fonts-firacode fonts-noto-core neovim exa ncdu
            fd-find bat dos2unix kitty-terminfo btop tree libtree autojump
# dependencies of the `suggested` packages
suggested_deps = xsel xxd


# The commands here will be run as normal userns mapped user, so use sudo if the command
# needs to run as root inside the container
[pkgmgr]
# the variables here are all required ones unless noted otherwise
install = /usr/bin/apt-fast install {quiet} {opt_dep} '{package}'
# check an installed actual or virtual (i.e. "Provides") package
check_install = /usr/bin/grep-status -FPackage,Provides -sPackage -n -w '{package}'
# proceed quietly without asking questions
quiet_flag = -y
# this is substituted for `{quiet}` placeholder in `info`, `info_all`, `search` and `search_all`
quiet_details_flag = -q
# apt-mark works correctly only if an optional dependency is actually marked to be so in the
# deb package, but will cause trouble for cases where user wants to mark a package as an optional
# dependency of another even otherwise (e.g. qt5ct as optional dependency of libqt5gui5)
opt_dep_flag =
# Expected output of the `opt_deps` command is:
# {header}
# {prefix}<name>{separator}<level>{separator}<installed>{separator}<description>
# where
# <name>: name of the optional dependency
# <level>: level of the dependency i.e. 1 for direct dependency, 2 for dependency of dependency and
#          so on; resolution of level > 2 is not required since caller currently ignores those
# <installed>: true if the dependency already installed and false otherwise
opt_deps = /usr/bin/python3 $YBOX_TARGET_SCRIPTS_DIR/pkgdeps.py \
           -s '{separator}' -p '{prefix}' -H '{header}'
uninstall = /usr/bin/apt remove {quiet} {purge} '{package}' && \
            ( [ "{remove_deps}" != "yes" ] || /usr/bin/apt autoremove {purge} )
purge_flag = --purge
remove_deps_flag = yes
orphans = /usr/bin/pacman -Qdtq
update_meta = /usr/bin/apt-fast update
update = /usr/bin/apt-fast install --only-upgrade {quiet} {packages}
update_all = /usr/bin/apt-fast full-upgrade {quiet}
clean = /usr/bin/apt-fast clean && /usr/bin/apt clean
clean_quiet = %(clean)s
mark_explicit = /usr/bin/apt-mark manual '{package}'

# the start and end of regex has to potentially match multiple comma-separated "Provides"
# with possible version in braces, hence the patterns below to match start and end of the name
# since we still want to do full word match (i.e. skip <name>-<ext> which matches with \b)
re_w_s = (^|[,[:space:]])
re_w_e = ($|[,([:space:]])
# convert space separated {packages} in regular expression with '|' separated components
info = PKGS="{packages}" && /usr/bin/grep-status -FPackage,Provides \
                                                 -e "%(re_w_s)s(${{PKGS// /|}})%(re_w_e)s"
info_all = PKGS="{packages}" && /usr/bin/grep-aptavail -FPackage,Provides \
                                                       -e "%(re_w_s)s(${{PKGS// /|}})%(re_w_e)s"

# next two variables are not required ones rather are used for expansion in list variables
# to avoid repetition
list_fmt = /usr/bin/sed 's/^\([^[:space:]]*\)[[:space:]]\+/\1{separator}/'
list_fmt_long = /usr/bin/python3 $YBOX_TARGET_SCRIPTS_DIR/list_fmt_long.py '{separator}'

list = /usr/bin/pacman -Qe {packages} | %(list_fmt)s
list_all = /usr/bin/pacman -Q {packages} | %(list_fmt)s
list_long = /usr/bin/pacman -Qie {packages} | %(list_fmt_long)s
list_all_long = /usr/bin/pacman -Qi {packages} | %(list_fmt_long)s
list_files = /usr/bin/pacman -Qlq '{package}'

# next five variables are not required ones rather are used for expansion in search variables

# --searchby=name only applies to the AUR packages, so filter out packages where only the package
# names match; the weird "set ..." subcommand converts space-separated quoted arguments into a
# regex i.e. ' one ' 'two' ' three' to " one |two | three" which is accomplished by declaring
# those arguments as positional arguments $1, $2 etc, then echo all arguments with IFS as "|"
args_re = "$(set -- {search}; IFS="|"; echo "$*")"
# word matching works correctly after removing color codes, but keep those in the final output
search_filter_prefix = /usr/bin/gawk 'BEGIN {{ IGNORECASE=1 }} /^[^[:space:]].*/ {{
                           pkg = $0; gsub(/\x1B\[[0-9;]+m/, ""); pkg_nc = $0; getline; '
search_filter_suffix = 'if (pkg_nc ~ /{word_start}('%(args_re)s'){word_end}/) print pkg"\n"$0 }}'
name_filter = %(search_filter_prefix)s%(search_filter_suffix)s
all_filter = %(search_filter_prefix)s'pkg_nc = pkg_nc $0; '%(search_filter_suffix)s

# search in package names in the repositories
search = /usr/bin/paru -Ss {quiet} {official} --searchby=name --sortby=popularity --color=always \
         {search} | %(name_filter)s
# search in package names and descriptions in the repositories
search_all = /usr/bin/paru -Ss {quiet} {official} --sortby=popularity --color=always \
             {search} | %(all_filter)s
# this is substituted for `{official}` placeholder in `search` and `search_all`
search_official_flag = --repo
# this is substituted for `{word_start}` placeholder in `search` and `search_all`
search_word_start_flag = \<
# this is substituted for `{word_end}` placeholder in `search` and `search_all`
search_word_end_flag = \>

# regex pattern matching processes that may be invoked by package manager directly or indirectly
# that may need to be terminated for cleanup
processes_pattern = \b(pacman|paru|keyboxd|dirmngr)\b
# comma separated globs for package manager related lock files (no spaces in names or within)
locks_pattern = /var/lib/pacman/db.lck,$HOME/.gnupg/public-keys.d/*.lock
repair = /usr/bin/paru -Syyuu {quiet}
# reinstall all packages
repair_all = %(repair)s && (/usr/bin/pacman -Qqn | /usr/bin/paru -S {quiet} -) && \
             (/usr/bin/pacman -Qqm | /usr/bin/paru -S {quiet} -) && %(clean_quiet)s


# Commands related to repository management
[repo]
conf_file = /etc/pacman.conf
exists = /usr/bin/grep -q '^[[:space:]]*Server[[:space:]]*=[[:space:]]*{url}\b' %(conf_file)s
# Ubuntu's keyserver is more reliable than the standard gnupg.net/pgp.net ones
default_gpg_key_server = hkps://keyserver.ubuntu.com
# output of the `add_key` command should have a line of the form "KEYID=..." that provides the
# registered keys that can be passed to `remove_key`
add_key = /bin/bash $YBOX_TARGET_SCRIPTS_DIR/add-gpg-key.sh '{key}' '{server}'
# additional options if supported should be mentioned using {options} below
add = /bin/echo '[{name}],{urls}' | /usr/bin/sed 's/,/\nServer = /g' | \
      /usr/bin/sudo /usr/bin/tee -a %(conf_file)s
# if source repository is supported, then it should be provided in `add_source` like for `add`
add_source
remove_key = /usr/bin/sudo /usr/bin/pacman-key --delete {key}
# The sed pattern below removes the [{name}] section from pacman.conf
# (S_PAT matches start of the section while E_PAT matches next section which has to be retained).
# If source repositories are supported in `add_source` command above, then {remove_source} boolean
# should be checked to remove source repository too.
rm_s_pat = ^[[:space:]]*\[{name}\][[:space:]]*$
rm_e_pat = ^[[:space:]]*\[.*
remove = /usr/bin/sudo /usr/bin/sed -i \
         '/%(rm_s_pat)s/,/%(rm_e_pat)s/ {{/%(rm_s_pat)s/d;/%(rm_e_pat)s/!d;}}' %(conf_file)s
