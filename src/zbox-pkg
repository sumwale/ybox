#!/usr/bin/python3

"""
Package management utility for zbox containers.
"""

import argparse
import os
import sys

from simple_term_menu import TerminalMenu  # type: ignore

from zbox.config import StaticConfiguration
from zbox.env import Environ
from zbox.pkg.inst import install_package
from zbox.pkg.list import list_packages
from zbox.pkg.uninst import uninstall_package
from zbox.pkg.update import update_package
from zbox.state import ZboxStateManagement
from zbox.util import EnvInterpolation, ZboxLabel, config_reader, get_docker_command
from zbox.util import print_error, print_info, print_warn, run_command, verify_zbox_state


def main(argv: list[str]) -> int:
    args = parse_args(argv)
    docker_cmd = get_docker_command(args, "-d")
    container_name = args.zbox

    if not container_name:
        # check running containers
        containers = str(run_command([docker_cmd, "container", "ls", "--format={{ .Names }}",
                                      f"--filter=label={ZboxLabel.CONTAINER_PRIMARY}"],
                                     capture_output=True, error_msg="container ls")).splitlines()
        # use running container if there is only one of them
        if len(containers) == 1:
            container_name = containers[0]
        elif not containers:
            print_error("No active zbox container found!")
            return 1
        elif args.quiet:
            print_error(
                f"Expected one active zbox container but found {', '.join(containers)}")
            return 1
        else:
            print_info("Please select the container to use:")
            # don't select on <Enter> (multi_select_select_on_accept) and allow for empty selection
            terminal_menu = TerminalMenu(containers,
                                         status_bar="Press <Enter> to select, <Esc> to exit")
            selection = terminal_menu.show()
            if selection is not None:
                container_name = containers[int(selection)]
            else:
                print_warn("Aborting")
                return 1

    print_info(f"Running the operation on '{container_name}'")
    verify_zbox_state(docker_cmd, container_name, ["running"], error_msg=" active ")

    env = Environ()
    with ZboxStateManagement(env) as state:
        if (runtime_conf := state.get_container_configuration(container_name)) is None:
            print_error(f"No state for zbox container '{container_name}' found!")
            return 1
        conf = StaticConfiguration(env, runtime_conf.distribution, container_name)
        env_interpolation = EnvInterpolation(env, [])
        distro_config = config_reader(conf.search_config_file(f"{conf.distribution}/distro.ini"),
                                      env_interpolation)
        pkgmgr = distro_config["pkgmgr"]
        return args.func(args, pkgmgr, docker_cmd, conf, runtime_conf, state)


def parse_args(argv: list[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Package management across zbox containers")
    operations = parser.add_subparsers(title="Operations", required=True, metavar="OPERATION",
                                       help="DESCRIPTION")
    add_install(operations.add_parser("install", help="install a package with dependencies"))
    add_uninstall(operations.add_parser("uninstall", help="uninstall a package and "
                                                          "optionally its dependencies"))
    add_update(operations.add_parser("update", help="update some or all packages"))
    add_list(operations.add_parser("list", help="list installed packages"))
    # parser.add_argument("operation", type=str,
    #                    choices=("install", "uninstall", "update", "list", "info", "search",
    #                             "mark", "clean", "repair"),
    #                    help="the package operation to perform")
    return parser.parse_args(argv)


def add_common_args(subparser: argparse.ArgumentParser) -> None:
    subparser.add_argument("-d", "--docker-path", type=str,
                           help="path of docker/podman if not in /usr/bin")
    subparser.add_argument("-z", "--zbox", type=str,
                           help="the zbox container to use for package operations else the user "
                                "is prompted to select a container from among the running ones")
    subparser.add_argument("-q", "--quiet", action="store_true",
                           help="proceed without asking any questions; the container selection "
                                "is also skipped and it is assumed that there is only one "
                                "running container which is selected else the operation fails")


def add_install(subparser: argparse.ArgumentParser) -> None:
    add_common_args(subparser)
    subparser.add_argument("-o", "--opt-deps", action="store_true",
                           help="install optional dependencies (or recommendations)")
    subparser.add_argument("-s", "--skip-executables", action="store_true",
                           help="skip creating wrappers for invoking executables installed by "
                                "the package; default is to create wrapper executables in user's "
                                "$HOME/.local/bin directory (or using $PYTHONUSERBASE)")
    subparser.add_argument("-S", "--skip-desktop-files", action="store_true",
                           help="skip creating wrapper desktop files for those installed by the "
                                "package and its optional dependencies; default is to create "
                                "wrapper desktop files in user's $HOME/.local/share/applications "
                                "(or using $PYTHONUSERBASE)")
    subparser.add_argument("package", type=str, help="the package to install")
    subparser.set_defaults(func=install_package)


def add_uninstall(subparser: argparse.ArgumentParser) -> None:
    add_common_args(subparser)
    subparser.add_argument("-p", "--purge", action="store_true",
                           help="remove everything including system configuration files "
                                "and/or data files of the package")
    subparser.add_argument("-r", "--remove-deps", action="store_true",
                           help="uninstall orphaned dependencies in addition to the package")
    subparser.add_argument("package", type=str, help="the package to uninstall")
    subparser.set_defaults(func=uninstall_package)


def add_update(subparser: argparse.ArgumentParser) -> None:
    add_common_args(subparser)
    subparser.add_argument("packages", nargs="*",
                           help="the packages to update if provided, else update the entire "
                                "installation of the container (which will end up updating all "
                                "other containers sharing the same root if configured)")
    subparser.set_defaults(func=update_package)


def add_list(subparser: argparse.ArgumentParser) -> None:
    add_common_args(subparser)
    subparser.add_argument("-a", "--all", action="store_true",
                           help="list all packages installed in the container including those "
                                f"not managed by {os.path.basename(__file__)}; when multiple "
                                "containers share the same root directory, then it will include "
                                "packages installed on other containers")
    subparser.add_argument("-e", "--explicit", action="store_true",
                           help="show only explicitly installed packages skipping those that have"
                                "been installed purely as a dependency")
    subparser.add_argument("-v", "--verbose", action="store_true",
                           help="show some package details including version and whether it is "
                                "a dependency or a top-level package")
    subparser.set_defaults(func=list_packages)


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
